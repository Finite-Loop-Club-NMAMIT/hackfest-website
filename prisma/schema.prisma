generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String?    @unique
  emailVerified   DateTime?
  phone           String?
  image           String?    @default("https://img.freepik.com/free-psd/3d-illustration-person-with-sunglasses_23-2149436188.jpg?w=900&t=st=1709875148~exp=1709875748~hmac=2f5b619c6bda073396a93cd48021b7013f5231bdfa745dcf976c260cca8c1b38")
  state           String?
  course          Courses?
  isVerified      Boolean    @default(false)
  isLeader        Boolean    @default(false)
  tShirtSize      TshirtSize @default(S)
  role            Role       @default(PARTICIPANT)
  profileProgress Progress   @default(FILL_DETAILS)
  attended        Boolean    @default(false)
  aadhaar         String?
  college_id      String?
  resume          String?
  github          String?
  teamId          String?
  collegeId       String?
  accounts        Account[]
  Judges          Judges?
  sessions        Session[]
  College         College?   @relation(fields: [collegeId], references: [id])
  Team            Team?      @relation(fields: [teamId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  Judge           Judge[]

  @@index([collegeId])
  @@index([teamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model College {
  id    String @id @default(cuid())
  name  String
  state States
  User  User[]
}

model Team {
  id                  String            @id @default(cuid())
  name                String            @unique
  teamNo              Int               @default(0)
  teamProgress        TeamProgress      @default(NOT_SELECTED)
  isComplete          Boolean           @default(false)
  referralId          Int?
  paymentStatus       PaymentStatus     @default(PENDING)
  validatorScore      Int               @default(0)
  superValidatorScore Int               @default(0)
  judgeScore          Int               @default(0)
  attended            Boolean           @default(false)
  IdeaSubmission      IdeaSubmission?
  github              Github?
  paymentProof        String?
  transactionId       String?
  Members             User[]
  VideoSubmission     VideoSubmissions?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  Scores              Scores[]
  Remark              Remark[]
}

model VideoSubmissions {
  id     String @id @default(cuid())
  teamId String @unique
  url    String
  Team   Team   @relation(fields: [teamId], references: [id])
}

model IdeaSubmission {
  id     String @id @default(cuid())
  teamId String @unique
  track  Tracks
  pptUrl String
  Team   Team   @relation(fields: [teamId], references: [id])
}

model Judges {
  id     String    @id @default(cuid())
  userId String    @unique
  type   JudgeType @default(VALIDATOR)
  User   User      @relation(fields: [userId], references: [id])
}

model Github {
  id             String   @id @default(cuid())
  githubTeamId   Int
  githubTeamSlug String
  teamId         String   @unique
  githubRepoName String[]
  githubRepoId   Int[]
  team           Team     @relation(fields: [teamId], references: [id])
}

model Judge {
  id     String    @id @default(cuid())
  userId String
  type   JudgeType
  User   User      @relation(fields: [userId], references: [id])
  Scores Scores[]
  Remark Remark[]
}

model Criteria {
  id        String    @id @default(cuid())
  criteria  String
  maxScore  Int
  JudgeType JudgeType @default(VALIDATOR)
  Scores    Scores[]
}

model Scores {
  id         Int      @id @default(autoincrement())
  Criteria   Criteria @relation(fields: [criteriaId], references: [id])
  Judge      Judge    @relation(fields: [judgeId], references: [id])
  score      Int
  Team       Team     @relation(fields: [teamId], references: [id])
  criteriaId String
  judgeId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  teamId     String

  @@unique([teamId, criteriaId, judgeId])
}

model AppSettings {
  id                    Int     @id @default(autoincrement())
  isRegistrationOpen    Boolean @default(true)
  isPaymentOpen         Boolean @default(true)
  isVideoSubmissionOpen Boolean @default(true)
  isProfileEditOpen     Boolean @default(true)
}

model Remark {
  id     String @id @default(cuid())
  remark String

  Team    Team   @relation(fields: [teamId], references: [id])
  Judge   Judge  @relation(fields: [judgeId], references: [id])
  teamId  String
  judgeId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, judgeId])
}

model TeamNames {
  name String @unique
}

enum JudgeType {
  DAY1
  DAY2
  DAY3
  VALIDATOR
  SUPER_VALIDATOR
}

enum Role {
  ADMIN
  JUDGE
  VALIDATOR
  SUPER_VALIDATOR
  TEAM
  PARTICIPANT
}

enum Courses {
  BE
  BTech
  BCA
  BSc
}

enum PaymentStatus {
  PENDING
  PAID
}

enum Progress {
  FILL_DETAILS
  FORM_TEAM
  SUBMIT_IDEA
  COMPLETE
}

enum Tracks {
  FINTECH
  SUSTAINABLE_DEVELOPMENT
  HEALTHCARE
  LOGISTICS
  OPEN_INNOVATION
  ALL
}

enum TshirtSize {
  S
  M
  L
  XL
  XXL
}

enum States {
  ANDHRA_PRADESH
  ARUNACHAL_PRADESH
  ASSAM
  BIHAR
  CHHATTISGARH
  GOA
  GUJARAT
  HARYANA
  HIMACHAL_PRADESH
  JHARKHAND
  KARNATAKA
  KERALA
  MADHYA_PRADESH
  MAHARASHTRA
  MANIPUR
  MEGHALAYA
  MIZORAM
  NAGALAND
  ODISHA
  PUNJAB
  RAJASTHAN
  SIKKIM
  TAMIL_NADU
  TELANGANA
  TRIPURA
  UTTARAKHAND
  UTTAR_PRADESH
  WEST_BENGAL
  ANDAMAN_NICOBAR
  CHANDIGARH
  DADRA_NAGAR_HAVELI_DAMAN_DIU
  DELHI
  JAMMU_KASHMIR
  LADAKH
  LAKSHADWEEP
  PUDUCHERRY
}

enum TeamProgress {
  NOT_SELECTED
  SEMI_SELECTED
  SELECTED
  TOP15
  WINNER
  RUNNER
  SECOND_RUNNER
  TRACK
}
